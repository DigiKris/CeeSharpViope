8.1 Reading from file
Write a C# program which takes a file name as a command line argument and then prints the content of the file to the screen.
Note: your program should check if a command line argument was provided and print “No filename provided!” if it does not exist. 
The program must also check that the provided file exists before reading it.

using System;
using System.IO;
using System.Linq;

namespace ReadingFromFile
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Any())
            {
                var path = args[0];
                if (File.Exists(path))
                {
                    var content = File.ReadAllText(path);
                    Console.WriteLine(content);
                }
                else
                {
                    Console.WriteLine("File does not exist!");
                }
            }
            else
            {
                Console.WriteLine("No filename provided!");
            }
        }
    }
}

8.2 Write file
Your task is to write a C# program which asks the user for a file name and content. Then the program creates the file with the user provided content.

using System;
using System.IO;

namespace WriteFile
{
    class Program
    {
        static void Main()
        {
            Console.Write("Filename to create: ");
            string fileName = Console.ReadLine();
            Console.WriteLine("Provide the content for {0}:",fileName);
            string content = Console.ReadLine();

            using (StreamWriter sw = new StreamWriter(fileName))
            {
                sw.Write(content);
            }
        }
    }
}

8.3 Append to file
Create a program which opens an existing file, prompts the user for content and appends the provided content to the file.

using System;
using System.IO;

namespace Append
{
    class Append
    {
        static void Main()
        {
            string FileName;
            string Content;
            Console.Write("Append to file: ");
            FileName = Console.ReadLine();
            Console.WriteLine("Provide the content for {0}:",FileName);
            Content = Console.ReadLine();
            using (StreamWriter sw = new StreamWriter(FileName,true))
            {
                sw.WriteLine(Content);
                sw.Close();
            }
        }
    }
}

8.4 Reading the directory
Create a program which reads the files in the current directory and prints them out one file name per line.

using System;
using System.IO;

namespace ReadingTheDirectory
{
    class ReadingTheDirectory
    {
        static void Main()
        {
            string path = ".";
            string[] dirList = Directory.GetFiles(path, ".");

            if (dirList.Length > 0)
            {
                foreach (string fileName in dirList)
                {
                    Console.WriteLine(fileName);
                }
            }
        }
    }
}

8.5 Deleting files
Write a C# program which deletes all files with .dat suffix from the current directory and prints how many files were deleted.

using System;
using System.IO;

namespace ReadingTheDirectory
{
    class ReadingTheDirectory
    {
        static void Main()
        {
            string path = ".";
            string[] dirList = Directory.GetFiles(path, "*.dat");
			int count = 0;

            if (dirList.Length > 0)
            {
                foreach (string fileName in dirList)
                {
                    File.Delete(fileName);
					count++;
                }
				 Console.WriteLine(count + " file(s) deleted.");
            }
        }
    }
}

9.1 Movie Watchlog: Movie class
In the final chapter of the course we put together everything we have learnt so far by creating a project called Movie Watch Log. 
As the name implies the software helps the user to keep track of the movies they have watched. Features include adding and deleting a movie, 
saving and loading the data to/from a storage media and showing a simple watch report.
In this exercise your task is to define Movie class, its fields and the constructor. The class must be serializable.
The class properties are Name, Length and Year and the constructor parameters are in the same order.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<Movie> movies = new List<Movie>() { };
        movies.Add(new Movie("Robocop", 102, 1987));
        movies.Add(new Movie("Robocop 2", 117, 1990));
        movies.Add(new Movie("Robocop 3", 104, 1993));

        foreach (var movie in movies)
        {
            Console.Write("Name: " + movie.Name + ", length: " + movie.Length + "min, year: " + movie.Year + "\n\r");
        }
    }
}


[Serializable]
public class Movie
{
    public Movie(string Name, int Length, int Year)
    {
        this.Name = Name;
        this.Length = Length;
        this.Year = Year;
    }

    public string Name { get; set; }
    public int Length { get; set; }
    public int Year { get; set; }
}

9.2 Movie Watchlog: Application Logic
Your task is to create the application logic for the Movie Watch Log. The program shows the Main Menu and asks for an input.  
If the input is valid, the program prints out the name of the option or "Unknown command" otherwise. 
Hint: you can build the application logic to its own class and call the selected methods based on the input.
using System;
using System.Collections.Generic;

namespace MovieWatchlog
{
    class Program
    {
        static List<Movie> movies = new List<Movie>();
        static void Main(string[] args)
        {
         

            while (true)
            {
                Console.WriteLine("\n\r\n\rMovie Watchlog\n==============");
                Console.WriteLine("1) Add a Movie\n" +
                                  "2) Delete a Movie\n" +
                                  "3) Show Report\n" +
                                  "4) Load Database\n" +
                                  "5) Save Database\n" +
                                  "6) Quit");
                Console.Write("Input: ");
                var userChoice = Convert.ToInt32(Console.ReadLine());
                
                if (userChoice == 1)
                {
                    Console.WriteLine("\n\rAdd a Movie");
                }
                else if (userChoice == 2)
                {
                    Console.WriteLine("\n\rDelete a Movie");

                }
                else if (userChoice == 3)
                {
                    Console.WriteLine("\n\rShow Report");
                }
                else if (userChoice == 4)
                {
                    Console.WriteLine("\n\rLoad database");
                }
                else if (userChoice == 5)
                {
                    Console.WriteLine("\n\rSave database");
                }
                else if (userChoice == 6)
                {
                    Console.Write("\n\r");
                    break;
                }
                else
                {
                    Console.WriteLine("\nUnknown command");
                }
            }
        }

        

        private static void ShowReport()
        {
            int totalMovies = 0;
            int totalMinutes = 0;
            foreach (var movie in movies)
            {
                totalMovies++;
                totalMinutes = totalMinutes + movie.Length;
                if (totalMovies >= 2)
                {
                    Console.WriteLine(movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
                else {
                    Console.WriteLine("\n\r" + movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
            }

            Console.Write("\n\rTotal of " + totalMovies + " movies and " + totalMinutes + " minutes.\n");
        }
    }
}
//


[Serializable]
public class Movie
{
    public string Name;
    public int Length;
    public int Year;
    public Movie(string name, int length, int year)
    {
        Name = name;
        Length = length;
        Year = year;
    }

}

9.3 Movie Watchlog: Add a Movie, Show Report
Your task is to program two functions to the Movie Watch Log. Add a Movie selection prompts the user for the movie details 
and then saves it to a List of objects of type Movie. Show Report loops over all movies in the list and prints out a report shown in the example output.
Hint: use your solutions from exercises 9.1 and 9.2 to build on.

using System;
using System.Collections.Generic;

namespace MovieWatchlog
{
    class Program
    {
        static List<Movie> movies = new List<Movie>();
        static void Main(string[] args)
        {
         

            while (true)
            {
                Console.WriteLine("\n\r\n\rMovie Watchlog\n==============");
                Console.WriteLine("1) Add a Movie\n" +
                                  "2) Delete a Movie\n" +
                                  "3) Show Report\n" +
                                  "4) Load Database\n" +
                                  "5) Save Database\n" +
                                  "6) Quit");
                Console.Write("Input: ");
                var userChoice = Convert.ToInt32(Console.ReadLine());
                
                if (userChoice == 1)
                {
                    AddMovie();
                }
                else if (userChoice == 2)
                {
                    Console.WriteLine("\n\rDelete a Movie");

                }
                else if (userChoice == 3)
                {
                    ShowReport();
                }
                else if (userChoice == 4)
                {
                    Console.WriteLine("\n\rLoad database");
                }
                else if (userChoice == 5)
                {
                    Console.WriteLine("\n\rSave database");
                }
                else if (userChoice == 6)
                {
                    Console.Write("\n\r");
                    break;
                }
                else
                {
                    Console.WriteLine("\nUnknown command");
                }
            }
        }

        private static void AddMovie()    
        {
            Console.Write("\n\rAdd a Movie:");
            Console.Write("\nName:");
            String name = Console.ReadLine();
            Console.Write("Length (min):");
            int length =  Convert.ToInt32(Console.ReadLine());
            Console.Write("Year:");
            int year = Convert.ToInt32(Console.ReadLine());
            movies.Add(new Movie( name, length, year));
        }

        private static void ShowReport()
        {
            int totalMovies = 0;
            int totalMinutes = 0;
            foreach (var movie in movies)
            {
                totalMovies++;
                totalMinutes = totalMinutes + movie.Length;
                if (totalMovies >= 2)
                {
                    Console.WriteLine(movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
                else {
                    Console.WriteLine("\n\r" + movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
            }

            Console.Write("\n\rTotal of " + totalMovies + " movies and " + totalMinutes + " minutes.\n");
        }
    }
}


[Serializable]
public class Movie
{
    public string Name;
    public int Length;
    public int Year;
    public Movie(string name, int length, int year)
    {
        Name = name;
        Length = length;
        Year = year;
    }

}

9.4 Movie Watchlog: Delete a Movie
Your task is to improve the program by adding the Delete a Movie functionality. Use your solution from previous exercise (9.3) to start with.

using System;
using System.Collections.Generic;

namespace MovieWatchlog
{
    static class MovieWatch
    {
        static List<Movie> movies = new List<Movie>();
        static void Main()
        {
         

            while (true)
            {
                Console.WriteLine("\n\r\n\rMovie Watchlog\n==============");
                Console.WriteLine("1) Add a Movie\n" +
                                  "2) Delete a Movie\n" +
                                  "3) Show Report\n" +
                                  "4) Load Database\n" +
                                  "5) Save Database\n" +
                                  "6) Quit");
                Console.Write("Input: ");
                var userChoice = Convert.ToInt32(Console.ReadLine());
                
                if (userChoice == 1)
                {
                    AddMovie();
                }
                else if (userChoice == 2)
                {
                    DeleteMovie();

                }
                else if (userChoice == 3)
                {
                    ShowReport();
                }
                else if (userChoice == 4)
                {
                    Console.WriteLine("\n\rLoad database");
                }
                else if (userChoice == 5)
                {
                    Console.WriteLine("\n\rSave database");
                }
                else if (userChoice == 6)
                {
                    Console.Write("\n\r");
                    break;
                }
                else
                {
                    Console.WriteLine("\nUnknown command");
                }
            }
        }

        private static void AddMovie()    
        {
            Console.Write("\n\rAdd a Movie:");
            Console.Write("\nName:");
            String name = Console.ReadLine();
            Console.Write("Length (min):");
            int length =  Convert.ToInt32(Console.ReadLine());
            Console.Write("Year:");
            int year = Convert.ToInt32(Console.ReadLine());
            movies.Add(new Movie( name, length, year));
        }

        private static void ShowReport()
        {
            int totalMovies = 0;
            int totalMinutes = 0;
            foreach (var movie in movies)
            {
                totalMovies++;
                totalMinutes = totalMinutes + movie.Length;
                if (totalMovies >= 2)
                {
                    Console.WriteLine(movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
                else {
                    Console.WriteLine("\n\r" + movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
                }
            }

            if (totalMovies <= 0)
            {
                 Console.Write("\n\r\n\rTotal of 0 movies and 0 minutes.\n");
            }
            else {
                Console.Write("\n\rTotal of " + totalMovies + " movies and " + totalMinutes + " minutes.\n");
            }
        }

        private static void DeleteMovie()
        {
            Console.WriteLine("\n\rDelete a Movie:");
            int movieList = 0;
            foreach (var movie in movies)
            {
                movieList++;
                Console.WriteLine(movieList + ") " + movie.Name + " (" + movie.Year + "), " + movie.Length + " minutes.  ");
            }
            Console.Write("Input: ");
            int input = Convert.ToInt32(Console.ReadLine());
            var removeMovie = input - 1;
            movies.RemoveAt(removeMovie);
            
        }
    }
}


[Serializable]
public class Movie
{
    public string Name;
    public int Length;
    public int Year;
    public Movie(string name, int length, int year)
    {
        Name = name;
        Length = length;
        Year = year;
    }

}